// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  Session       Session[]
  Account       Account?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  Post                      Post[]
  MemorizeSentences         MemorizeSentences[]
  CategoryMemorizeSentences CategoryMemorizeSentences[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model CategoryMemorizeSentences {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  userId                 String
  user                   User                     @relation(fields: [userId], references: [id])
  MemorizeSentences      MemorizeSentences[]
  GroupMemorizeSentences GroupMemorizeSentences[]

  @@map("category_memorize_sentences")
}

model GroupMemorizeSentences {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  MemorizeSentences MemorizeSentences[]

  categoryMemorizeSentenceId Int
  categoryMemorizeSentence   CategoryMemorizeSentences @relation(fields: [categoryMemorizeSentenceId], references: [id])

  @@map("group_memorize_sentences")
}

model MemorizeSentences {
  id        Int      @id @default(autoincrement())
  textTH    String
  textEN    String
  voiceEN   String
  order     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  categoryMemorizeSentenceId Int
  categoryMemorizeSentence   CategoryMemorizeSentences @relation(fields: [categoryMemorizeSentenceId], references: [id])

  groupMemorizeSentenceId Int?
  groupMemorizeSentence   GroupMemorizeSentences? @relation(fields: [groupMemorizeSentenceId], references: [id])

  userId String
  User   User   @relation(fields: [userId], references: [id])

  @@map("memorize_sentences")
}
